// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReservaPropiedades.Infrastructure.Data;

#nullable disable

namespace ReservaPropiedades.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251010021235_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PropiedadServicio", b =>
                {
                    b.Property<int>("PropiedadesId")
                        .HasColumnType("int");

                    b.Property<int>("ServiciosId")
                        .HasColumnType("int");

                    b.HasKey("PropiedadesId", "ServiciosId");

                    b.HasIndex("ServiciosId");

                    b.ToTable("PropiedadServicio");
                });

            modelBuilder.Entity("ReservaPropiedades.Domain.Entities.DisponibilidadPropiedad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("PropiedadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropiedadId");

                    b.ToTable("DisponibilidadesPropiedades");
                });

            modelBuilder.Entity("ReservaPropiedades.Domain.Entities.ImagenPropiedad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("EsImagenPrincipal")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreArchivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropiedadId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropiedadId");

                    b.ToTable("ImagenesPropiedades");
                });

            modelBuilder.Entity("ReservaPropiedades.Domain.Entities.Propiedad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CapacidadHuespedes")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PrecioPorNoche")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Propiedades");
                });

            modelBuilder.Entity("ReservaPropiedades.Domain.Entities.Reseña", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Calificacion")
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("PropiedadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropiedadId");

                    b.ToTable("Reseñas");
                });

            modelBuilder.Entity("ReservaPropiedades.Domain.Entities.Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("PropiedadServicio", b =>
                {
                    b.HasOne("ReservaPropiedades.Domain.Entities.Propiedad", null)
                        .WithMany()
                        .HasForeignKey("PropiedadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservaPropiedades.Domain.Entities.Servicio", null)
                        .WithMany()
                        .HasForeignKey("ServiciosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReservaPropiedades.Domain.Entities.DisponibilidadPropiedad", b =>
                {
                    b.HasOne("ReservaPropiedades.Domain.Entities.Propiedad", "Propiedad")
                        .WithMany()
                        .HasForeignKey("PropiedadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propiedad");
                });

            modelBuilder.Entity("ReservaPropiedades.Domain.Entities.ImagenPropiedad", b =>
                {
                    b.HasOne("ReservaPropiedades.Domain.Entities.Propiedad", "Propiedad")
                        .WithMany("Imagenes")
                        .HasForeignKey("PropiedadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propiedad");
                });

            modelBuilder.Entity("ReservaPropiedades.Domain.Entities.Propiedad", b =>
                {
                    b.OwnsOne("ReservaPropiedades.Domain.ValueObjects.Ubicacion", "Ubicacion", b1 =>
                        {
                            b1.Property<int>("PropiedadId")
                                .HasColumnType("int");

                            b1.Property<string>("Ciudad")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("CodigoPostal")
                                .HasColumnType("int");

                            b1.Property<string>("Direccion")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Pais")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Provincia")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PropiedadId");

                            b1.ToTable("Propiedades");

                            b1.WithOwner()
                                .HasForeignKey("PropiedadId");
                        });

                    b.Navigation("Ubicacion")
                        .IsRequired();
                });

            modelBuilder.Entity("ReservaPropiedades.Domain.Entities.Reseña", b =>
                {
                    b.HasOne("ReservaPropiedades.Domain.Entities.Propiedad", "Propiedad")
                        .WithMany("Reseñas")
                        .HasForeignKey("PropiedadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propiedad");
                });

            modelBuilder.Entity("ReservaPropiedades.Domain.Entities.Propiedad", b =>
                {
                    b.Navigation("Imagenes");

                    b.Navigation("Reseñas");
                });
#pragma warning restore 612, 618
        }
    }
}
